{"version":3,"sources":["App.js","action/Action.js","reducers/Reducer.js","reducers/rootReducer.js","storage/store.js","index.js"],"names":["App","useState","name","phone","email","inputData","setInputData","HandlingFormData","event","iname","target","ivalue","value","preval","dispatch","useDispatch","data","useSelector","state","contactReducer","list","show","setShow","toggle","setToggle","useEffect","localStorage","setItem","JSON","stringify","localData","getItem","parse","getStoredData","className","type","placeholder","onChange","onClick","e","formData","payload","id","Date","getTime","toString","eid","ename","ephone","eemail","style","visibility","map","element","key","textTransform","backgroundColor","height","width","color","initialState","inputValue","action","window","alert","newContact","filter","ele","console","log","editedItem","storeContact","rootReducer","combineReducers","store","createStore","ReactDOM","render","Fragment","document","getElementById"],"mappings":"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","file":"static/js/main.8728d418.chunk.js","sourcesContent":["import React, { useEffect, useState } from \"react\";\nimport \"./index.css\";\nimport { addContact, deleteContact, editContact, saveEditedContact, storeContact } from \"./action/Action\";\nimport { useDispatch, useSelector } from \"react-redux\";\n\n\n\n\nconst App = () =>\n{\n\n  const [inputData, setInputData] = useState({\n    name: \"\",\n    phone: \"\",\n    email: \"\"\n  })\n\n  const HandlingFormData = (event) =>\n  {\n    const iname = event.target.name;\n    const ivalue = event.target.value;\n\n    setInputData((preval) =>\n    {\n      return {\n        ...preval,\n        [iname]: ivalue\n      }\n    })\n  }\n\n\n\n  const dispatch = useDispatch();\n  const data = useSelector((state) => state.contactReducer.list);\n  const [show, setShow] = useState(\"hidden\");\n  const [toggle, setToggle] = useState(true);\n\n\n  useEffect(() =>\n  {\n    localStorage.setItem(\"reduxContact\", JSON.stringify(data));\n  }, [data]);\n\n\n  const getStoredData = () =>\n  {\n    const localData = localStorage.getItem(\"reduxContact\");\n    \n    if (localData) {\n      return JSON.parse(localData);\n    } else {\n      return [];\n    }\n    \n  }\n  \n  getStoredData(data);\n\n  return (\n    <>\n      <div className=\"main_div\">\n        <div className=\"child_div\">\n          <div className=\"form_div\">\n          \n            <input type=\"text\" name=\"name\" placeholder=\" enter name...\" onChange={HandlingFormData}\n              value={inputData.name} />\n            <input type=\"number\" name=\"phone\" placeholder=\"enter phone number...\" onChange={HandlingFormData}\n              value={inputData.phone} />\n            <input type=\"email\" name=\"email\" placeholder=\"enter email id...\" onChange={HandlingFormData}\n              value={inputData.email} />\n            {toggle ?\n              <button className=\"btn\" onClick={(e) => dispatch(addContact(inputData),\n                setInputData({ name: \"\", phone: \"\", email: \"\" }), setShow(\"visible\"))}> Add </button>\n              :\n              <button className=\"btn\" onClick={() => dispatch(saveEditedContact(inputData), setToggle(true),\n              setInputData({name:\"\",phone:\"\",email:\"\"}))}> Save </button>}\n            </div>\n          <div className=\"table\">\n            <table style={{visibility: show}} >\n              <thead>\n                <tr>\n                  <th> Name </th>\n                  <th> Phone </th>\n                  <th> Email </th>\n                  <th> Actions </th>\n                </tr>\n              </thead>\n              {data.map((element) =>\n              {\n                return (\n                <tr key={element.id}>\n                <td style={{textTransform: \"capitalize\"}}> {element.name} </td>\n                <td> {element.phone} </td>\n                <td> {element.email} </td>\n                    <td> <button style={{ backgroundColor: \"green\", height: \"20px\", width: \"60px\", color: \"white\" }}\n                      onClick={() => dispatch(editContact(element.id, element), setInputData(element),\n                        setToggle(false))}>Edit</button> /\n                      <button style={{ backgroundColor: \"red\", height: \"20px\", width: \"60px\", color: \"white\" }}\n                        onClick={() => dispatch(deleteContact(element.id))} >Delete</button> </td>\n              </tr>\n                )\n              })}\n            </table>\n          </div>\n        </div>\n      </div>\n    </>\n  )\n}\n\n\nexport default App;\n","export const addContact = (formData) =>\r\n{\r\n    return {\r\n        type: \"ADD_CONTACT\",\r\n        payload: {\r\n            id: new Date().getTime().toString(),\r\n            name: formData.name,\r\n            phone: formData.phone,\r\n            email: formData.email\r\n        },\r\n    \r\n    }\r\n};\r\n\r\nexport const deleteContact = (id) =>\r\n{\r\n    return {\r\n        type: \"DELETE_CONTACT\",\r\n        id\r\n    \r\n    }\r\n};\r\n\r\n\r\nexport const editContact = (id, data) =>\r\n{\r\n    return {\r\n        type: \"EDIT_CONTACT\",\r\n        \r\n    }\r\n};\r\n\r\nexport const saveEditedContact = (value) =>\r\n{\r\n    return {\r\n        type: \"SAVE_CONTACT\",\r\n        payload: {\r\n            eid: value.id,\r\n            ename: value.name,\r\n            ephone: value.phone,\r\n            eemail: value.email\r\n        }\r\n    }\r\n}\r\n\r\n\r\nexport const storeContact = () =>\r\n{\r\n    return {\r\n        type: \"STORE_CONTACT\",\r\n        payload: \"reduxContact\"\r\n    }\r\n}","const initialState = {\r\n    list: [],\r\n    inputValue: {}\r\n};\r\n\r\n\r\nconst contactReducer = (state = initialState, action) =>\r\n{\r\n    switch (action.type) {\r\n        case \"ADD_CONTACT\":\r\n\r\n            const { id, name, phone, email } = action.payload;\r\n\r\n            if (!id || !name || !phone || !email) {\r\n                \r\n                window.alert(\"please fill\");\r\n\r\n                return {\r\n                    list: []\r\n                };\r\n            } else {\r\n                \r\n            \r\n                return {\r\n                \r\n                    list: [\r\n                        ...state.list,\r\n                        {\r\n                            id: id,\r\n                            name: name,\r\n                            phone: phone,\r\n                            email: email\r\n                        }\r\n                    ]\r\n                };\r\n            }\r\n        \r\n        \r\n        case \"DELETE_CONTACT\":\r\n            \r\n            const newContact = state.list.filter((ele) => ele.id !== action.id);\r\n            console.log(newContact);\r\n            \r\n            return {\r\n                list: newContact\r\n            };\r\n        \r\n\r\n\r\n        case \"SAVE_CONTACT\":\r\n            \r\n            const { eid, ename, ephone, eemail } = action.payload;\r\n\r\n            \r\n\r\n            const editedItem = state.list.map((ele) =>\r\n            {\r\n                if (ele.id === eid) {\r\n                   \r\n                    return {\r\n                        id: eid,\r\n                        name: ename,\r\n                        phone: ephone,\r\n                        email: eemail\r\n                    };\r\n                } else {\r\n                    return ele;\r\n                }\r\n            });\r\n            \r\n            console.log(editedItem);\r\n\r\n            return {\r\n                list: editedItem\r\n            };\r\n\r\n        case \"STORE_CONTACT\":\r\n            \r\n            const storeContact = () =>\r\n            {\r\n                const localData = localStorage.getItem(action.payload);\r\n\r\n                if (localData) {\r\n                    \r\n                    return JSON.parse(localData);\r\n                } else {\r\n                    return state.list;\r\n                }\r\n            };\r\n            \r\n            console.log(storeContact);\r\n            \r\n            \r\n\r\n        default: return state;\r\n    };\r\n};\r\n\r\n\r\nexport default contactReducer;","import contactReducer from \"./Reducer\";\r\nimport { combineReducers } from \"redux\";\r\n\r\n\r\nconst rootReducer = combineReducers({\r\n    contactReducer\r\n});\r\n\r\n\r\nexport default rootReducer;","import rootReducer from \"../reducers/rootReducer\";\r\nimport { createStore } from \"redux\";\r\n\r\nconst store = createStore(rootReducer);\r\n\r\n\r\n\r\n\r\nexport default store;","\nimport React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport store from \"./storage/store\";\nimport { Provider } from \"react-redux\";\n\n\n\n\n\n\nReactDOM.render(\n   <React.Fragment>\n      <Provider store = {store}>\n         <App />\n     </Provider>\n      </React.Fragment>,\n   document.getElementById(\"root\")\n);\n\n\n\n\n\n\n//eactDOM.render(\n   //React.createElement(\"h1\", null, \"World is beautiful!!\"),\n   //ocument.getElementById(\"root\")\n//);"],"sourceRoot":""}